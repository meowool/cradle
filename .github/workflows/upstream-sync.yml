name: 'Sync Gradle Upstream'

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  sync-default-branch:
    runs-on: ubuntu-latest
    name: Sync latest changes from upstream master branch

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # We need to specify a token here, because the default "GITHUB_TOKEN"
          # will not trigger a "push" event.
          token: ${{ secrets.BOT_TOKEN }}
          # We need to fetch the full history, because we need to compare
          # the current branch with the "upstream/master" branch.
          fetch-depth: 0

      - name: Configure git
        run: |
          git config --global user.name "Meowool Robot"
          git config --global user.email "meowool@proton.me"
          # We can automatically resolve some conflicts because there are
          # certain choices we can make without hesitation.
          git config --global merge.ours.driver true

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          git_user_signingkey: true
          # Sign all commits automatically.
          git_commit_gpgsign: true

      - name: Sync upstream changes
        id: sync
        uses: actions/github-script@v6
        with:
          script: |
            const green = 32
            const yellow = 33
            const info = (color, message) => core.info(`\u001B[${color}m${message}\u001B[39m`)

            // Fetch upstream master branch
            await exec.exec('git', ['remote', 'add', 'gradle', 'https://github.com/gradle/gradle.git'])
            await exec.exec('git', ['fetch', 'gradle', 'master', '--quiet'])

            // Check if there are new commits on the upstream branch
            const gradleCommits = await exec.getExecOutput(
              'git',
              ['log', 'HEAD..gradle/master', '-n', '100', `--pretty=format:'%h \u001B[95m%s\u001B[39m'`],
              { ignoreReturnCode: true }
            )
            const hasNewCommits = gradleCommits.stdout.trim() !== ''

            if (hasNewCommits) {
              info(yellow, '\nðŸ†• New commits found upstream to sync.')
              // Merge upstream master branch into target branch
              await exec.exec('git', [
                'merge', 'gradle/master', '--no-edit', '-m',
                'chore: merge upstream branch `gradle/master` into `main`'
              ])
              // Push the changes to the target branch
              await exec.exec('git', ['push', '--verbose'])
            } else {
              info(green, '\nâœ… Our branch is not behind the upstream!')
            }
