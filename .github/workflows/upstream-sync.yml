name: 'Sync Gradle Upstream'

on:
  schedule:
    - cron: '*/30 5-22 * * *'
  workflow_dispatch:

jobs:
  sync-default-branch:
    runs-on: ubuntu-latest
    name: Sync latest changes from upstream master branch

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # We need to specify a token here, because the default "GITHUB_TOKEN"
          # will not trigger a "push" event.
          token: ${{ secrets.BOT_TOKEN }}
          # We need to fetch the full history, because we need to compare
          # the current branch with the "upstream/master" branch.
          fetch-depth: 0

      - name: Configure git
        run: |
          git config --global user.name "Meowool Robot"
          git config --global user.email "meowool@proton.me"
          # We can automatically resolve some conflicts because there are
          # certain choices we can make without hesitation.
          git config --global merge.ours.driver true

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          git_user_signingkey: true
          # Sign all commits automatically.
          git_commit_gpgsign: true

      - name: Sync upstream changes
        id: sync
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const green = 32
            const magentaBright = 95
            const info = (color, message) => core.info(`\u001B[${color}m${message}\u001B[39m`)
            const upstreamUrl = 'https://github.com/gradle/gradle'

            // Fetch upstream master branch
            await exec.exec('git', ['remote', 'add', 'gradle', upstreamUrl + '.git'])
            await exec.exec('git', ['fetch', 'gradle', 'master', '--quiet'])

            // Read the upstream commits that are ahead of the current branch
            const gradleCommits = []
            await exec.exec('git', ['log', 'HEAD..gradle/master', '--oneline'], {
              silent: true,
              ignoreReturnCode: true,
              listeners: {
                stdout: data => data.toString().split('\n').forEach(line => {
                  if (line === '') return
                  const match = /^(\w+)\s(.*)$/g.exec(line)
                  if (!match) core.setFailed(`Failed to parse commit: '${line}'`)

                  const hash = match[1]
                  const subject = match[2].replace(/(?<=^|\s)#(\d+)(?=\s|$)/gm, `${upstreamUrl}/pull/$1`)
                  gradleCommits.push(`${hash}: ${subject}`)
                })
              }
            })

            // Check if there are new commits on the upstream branch
            const newCommitCount = gradleCommits.length
            if (newCommitCount == 0) {
              info(green, '✅ Our branch is not behind the upstream!')
            } else {
              info(magentaBright, `🔍 Found new commits upstream (${newCommitCount})`)
              info(magentaBright, '----------------------------------------------------')

              // Merge upstream master branch into target branch
              await exec.exec('git', [
                'merge', 'gradle/master', '--no-edit', '-m',
                'chore: merge upstream branch `gradle/master` into `main`\n\n'
                  + `This commit synchronizes the latest ${newCommitCount} changes from the ${upstreamUrl}. The changes include:\n\n`
                  + gradleCommits.join('\n')
              ])

              // Push the changes to the target branch
              await exec.exec('git', ['push', '--verbose'])
            }
